#include <stdio.h>

int Add(int x, int y)
{
	int z = 0;
	z = x + y;
	return z;
}

int main()
{
	int a = 10;
	int b = 20;
	//printf("sum = %d\n", Add(a, b));
	//printf("%p\n", &Add); //009110E1
	//printf("%p\n", Add); //009110E1
	int (*pa)(int, int) = Add;
	//首先(*pa)表明是一个指针，其类型是int (int, int)
	//其中，第一个int是指函数的返回值的类型是整型，括号里面的int表示函数的两个形参的类型是整型
	//当然，也可以写int (int x, int y)，一般只写类型即可，x、y可以省略
	printf("%d\n", (*pa)(2, 3)); //5
	printf("%d\n", (**pa)(2, 3)); //5
	printf("%d\n", (***pa)(2, 3)); //5
	//说明对于函数来说，这些*不起作用，可以直接省略
	//但是加上一个*比较容易理解
	printf("%d\n", (pa)(2, 3)); //5
	//可以这样理解：Add <==> pa，因此还可以这样写：
	printf("%d\n", pa(2, 3)); //5
	//这里的*pa就是指Add函数，(*pa)(2, 3) <==> Add(2, 3)
	return 0;
}


//两段有趣的代码

//代码1
(*(void (*)())0)();
//首先，void (*)()是一个函数指针，其类型是void ()
//然后将这个函数指针括起来放在0的前面，意思是将0进行强制类型转换，转换成void (*)() 函数指针类型 - 现在0就是一个函数的地址
//前面的*就是解引用操作，调用void (*)()这个函数指针的地址，即0地址处的该函数

//代码2
void (*signal(int , void(*)(int)))(int);
//首先，signal(int, void(*)(int))是一个函数，有两个参数，分别为int类型和void(*)(int)类型，其中，void(*)(int)是一个函数指针，其类型为void (int)。函数的返回类型是void (*)(int) - 一个函数指针。
//总而言之，这就是一个函数的声明语句，其中函数名是signal，函数的参数有两个，一个是int类型，另一个是函数指针，该函数指针指向的函数的参数是int，返回类型为void。signal函数返回值也是一个函数指针，该函数指针指向的函数的参数是int，返回类型为void。

//代码2可以精简一些：
//typedef的用法：
typedef unsigned int u_int;

//同理，可以将函数指针类型重命名为ptr_fun
typedef void(* ptr_fun)(int); 
//从而简化得到：
prt_fun signal(int, ptr_fun);
