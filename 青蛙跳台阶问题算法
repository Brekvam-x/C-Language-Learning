// 一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个n级的台阶总共有多少种跳法？
//分析：
//当N=1，只能跳一层
//当N=2，可以跳两次一层，或者一次跳两层
//当N=3，总共是2层的跳法+1层的跳法
//当N=4，总共是3层的跳法+2层的跳法
//....
//以此类推，当N=n时，是n-1层和n-2层的跳法
//实际上是变相的斐波那契数列，因此递归法效率较低
#include <stdio.h>

//递归
int jumpMethod1(int x)
{
	if (x == 1)
		return 1;
	else if (x == 2)
		return 2;
	else
	{
		return jumpMethod1(x - 1) + jumpMethod1(x - 2);
	}
}

//迭代
int jumpMethod2(int x)
{
	int a = 1;
	int b = 2;
	int c = 0;
	if (x == 1)//台阶数为1时，跳法为1
		return a;
	else if (x == 2)//台阶数为2时，跳法为2
		return b;
	else
		while (x > 2)
		{
			c = a + b;
			a = b;//向后移动
			b = c;
			x--;
		}
		return c;
}

int main()
{
	int n = 0;//台阶层数
	int num = 0;//跳法数量
	printf("请输入台阶层数：");
	scanf_s("%d", &n);
	num = jumpMethod2(n);  //使用迭代法
	printf("%d层台阶一共有%d种跳法\n", n, num);
	return 0;
}
